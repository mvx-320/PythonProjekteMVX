# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MenuBar1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")                  #OBJECTNAME WIRD NICHT ANGEZEIGT
        MainWindow.resize(800, 600)                             #Fenstergröße

        self.centralwidget = QtWidgets.QWidget(MainWindow)      #Erstellt Haupt Widgets des Fensters
        self.centralwidget.setObjectName("centralwidget")       #OBJECTNAME WIRD NICHT ANGEZEIGT

        self.label = QtWidgets.QLabel(self.centralwidget)       #Erstellt Label Layout
        self.label.setGeometry(QtCore.QRect(200, 100, 571, 221))

        font = QtGui.QFont()                                    #NOTWENDIG für Schriftart
        font.setPointSize(36)                                   #Schriftgröße
        self.label.setFont(font)                                #Schriftart auf Label-Layout gesetzt
        self.label.setObjectName("label")

        MainWindow.setCentralWidget(self.centralwidget)          
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuDatei = QtWidgets.QMenu(self.menubar)
        self.menuDatei.setObjectName("menuDatei")
        self.menuBearbeiten = QtWidgets.QMenu(self.menubar)
        self.menuBearbeiten.setObjectName("menuBearbeiten")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNeu = QtWidgets.QAction(MainWindow)
        self.actionNeu.setObjectName("actionNeu")
        self.action_ffnen = QtWidgets.QAction(MainWindow)
        self.action_ffnen.setObjectName("action_ffnen")
        self.actionKopieren = QtWidgets.QAction(MainWindow)
        self.actionKopieren.setObjectName("actionKopieren")
        self.actionEinf_gen = QtWidgets.QAction(MainWindow)
        self.actionEinf_gen.setObjectName("actionEinf_gen")
        self.actionSpeichern = QtWidgets.QAction(MainWindow)
        self.actionSpeichern.setObjectName("actionSpeichern")
        self.menuDatei.addAction(self.actionNeu)                #Aktion-Neu wird zu Menü-Ation-Datei hinzugefügt
        self.menuDatei.addAction(self.action_ffnen)
        self.menuDatei.addAction(self.actionSpeichern)
        self.menuBearbeiten.addAction(self.actionKopieren)
        self.menuBearbeiten.addAction(self.actionEinf_gen)
        self.menubar.addAction(self.menuDatei.menuAction())     #Menü-Aktion-Datei wird zu den Registern hinzugefügt
        self.menubar.addAction(self.menuBearbeiten.menuAction())

        self.retranslateUi(MainWindow)                          #Aufruf der Funktion retranslateUi
        QtCore.QMetaObject.connectSlotsByName(MainWindow)       # EVTL. um aus "Ctrl+X" den Shortkey zu machen


        self.actionNeu.triggered.connect(lambda: self.clicked("Neu wirde geklickt"))
        self.action_ffnen.triggered.connect(lambda: self.clicked("Öffnen wirde geklickt"))
        self.actionKopieren.triggered.connect(lambda: self.clicked("Kopieren wirde geklickt"))
        self.actionEinf_gen.triggered.connect(lambda: self.clicked("Einfügen wirde geklickt"))
        self.actionSpeichern.triggered.connect(lambda: self.clicked("Speichern wirde geklickt"))
       
        app.aboutToQuit.connect(self.closeEvent)  #Aufruf der Schließen-Funktion   

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Brauerei - Software"))  #Fenstertitel
        self.label.setText(_translate("MainWindow", "Das ist Text"))                #Text mit Label-Layout
        self.menuDatei.setTitle(_translate("MainWindow", "Datei"))                  #Titel der Menü Aktion
        self.menuBearbeiten.setTitle(_translate("MainWindow", "Bearbeiten"))

        self.actionNeu.setText(_translate("MainWindow", "Neu"))                           #Name der Aktion-Neu
        self.actionNeu.setStatusTip(_translate("MainWindow", "Erstellt neues Dokument"))  #Tipp (Was macht die Aktion)
        self.actionNeu.setShortcut(_translate("MainWindow", "Ctrl+N"))                    #Shortkey

        self.action_ffnen.setText(_translate("MainWindow", "Öffnen"))
        self.action_ffnen.setStatusTip(_translate("MainWindow", "Öffnet ein Dokument"))
        self.action_ffnen.setShortcut(_translate("MainWindow", "Ctrl+O"))

        self.actionKopieren.setText(_translate("MainWindow", "Kopieren"))
        self.actionKopieren.setStatusTip(_translate("MainWindow", "Kopiert"))
        self.actionKopieren.setShortcut(_translate("MainWindow", "Ctrl+C"))

        self.actionEinf_gen.setText(_translate("MainWindow", "Einfügen"))
        self.actionEinf_gen.setStatusTip(_translate("MainWindow", "Fügt ein"))
        self.actionEinf_gen.setShortcut(_translate("MainWindow", "Ctrl+V"))

        self.actionSpeichern.setText(_translate("MainWindow", "Speichern"))
        self.actionSpeichern.setStatusTip(_translate("MainWindow", "Speichert das Dokument"))
        self.actionSpeichern.setShortcut(_translate("MainWindow", "Ctrl+S"))

    def closeEvent(self):                         #Sollte das Fenster schließen FUNKTIONIERT ABER NICHT 
        print('Close button pressed')
        import sys
        sys.exit(0)


    def clicked(self, text):
        self.label.setText(text)
        self.label.adjustSize()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()           #Variable MainWindow von Package QtWidgets . Klasse QApplication
    ui = Ui_MainWindow()                           #Deklaration Objekt
    ui.setupUi(MainWindow)                         #Aufruf der Setup-Funktion
    MainWindow.show()                              #Anzeigen des MainWindow
    sys.exit(app.exec_())                          #Programm beenden bei Application Exit
                                                   #MUSS BEI NOCH BEI "FENSTER SCHLIEßEN" FUNKTIONIEREN